cmake_minimum_required(VERSION 3.0)

set(CMAKE_BUILD_TYPE "Debug")
project(Screencoder VERSION 0.1.0)

set(CMAKE_RC_COMPILER windres)

file(DOWNLOAD 
	"https://github.com/OnePlay-Internet/screencoder/releases/download/library/libstdc++-6.dll"
	"${CMAKE_CURRENT_SOURCE_DIR}/libstdc++-6.dll"
	TIMEOUT 10)

file(DOWNLOAD 
	"https://github.com/OnePlay-Internet/screencoder/releases/download/library/mingw_x64_staticlib.zip"
	"${CMAKE_CURRENT_SOURCE_DIR}/build-tools/mingw.zip"
	TIMEOUT 300)
file(ARCHIVE_EXTRACT
	INPUT 
	${CMAKE_CURRENT_SOURCE_DIR}/build-tools/mingw.zip
	DESTINATION 
	${CMAKE_CURRENT_SOURCE_DIR}/build-tools/mingw
)

file(DOWNLOAD 
	"https://github.com/OnePlay-Internet/screencoder/releases/download/library/msys2.zip"
	"${CMAKE_CURRENT_SOURCE_DIR}/build-tools/msys2.zip"
	TIMEOUT 300)
file(ARCHIVE_EXTRACT
	INPUT 
	${CMAKE_CURRENT_SOURCE_DIR}/build-tools/msys2.zip
	DESTINATION 
	${CMAKE_CURRENT_SOURCE_DIR}/build-tools)


add_compile_definitions(MINGW)
set(CMAKE_BUILD_TYPE "Debug")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY  ${CMAKE_SOURCE_DIR}/bin) 
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY  ${CMAKE_SOURCE_DIR}/bin) 
set(CMAKE_PDB_OUTPUT_DIRECTORY      ${CMAKE_SOURCE_DIR}/bin) 



set(FFMPEG_LIBRARIES
	${CMAKE_CURRENT_SOURCE_DIR}/build-tools/mingw/windows/lib/libavformat.a
	${CMAKE_CURRENT_SOURCE_DIR}/build-tools/mingw/windows/lib/libavcodec.a
	${CMAKE_CURRENT_SOURCE_DIR}/build-tools/mingw/windows/lib/libavdevice.a
	${CMAKE_CURRENT_SOURCE_DIR}/build-tools/mingw/windows/lib/libavfilter.a
	${CMAKE_CURRENT_SOURCE_DIR}/build-tools/mingw/windows/lib/libavutil.a
	${CMAKE_CURRENT_SOURCE_DIR}/build-tools/mingw/windows/lib/libpostproc.a
	${CMAKE_CURRENT_SOURCE_DIR}/build-tools/mingw/windows/lib/libswresample.a
	${CMAKE_CURRENT_SOURCE_DIR}/build-tools/mingw/windows/lib/libswscale.a
	${CMAKE_CURRENT_SOURCE_DIR}/build-tools/mingw/windows/lib/libx264.a
	${CMAKE_CURRENT_SOURCE_DIR}/build-tools/mingw/windows/lib/libx265.a
	${CMAKE_CURRENT_SOURCE_DIR}/build-tools/mingw/windows/lib/libhdr10plus.a

	${CMAKE_CURRENT_SOURCE_DIR}/build-tools/msys2/libz.a
    ${CMAKE_CURRENT_SOURCE_DIR}/build-tools/msys2/liblzma.a
    ${CMAKE_CURRENT_SOURCE_DIR}/build-tools/msys2/libbcrypt.a
    ${CMAKE_CURRENT_SOURCE_DIR}/build-tools/msys2/libiconv.a
	${CMAKE_CURRENT_SOURCE_DIR}/build-tools/msys2/libstdc++.a
	${CMAKE_CURRENT_SOURCE_DIR}/build-tools/msys2/libwinpthread.a
	${CMAKE_CURRENT_SOURCE_DIR}/build-tools/msys2/libssp.a
	${CMAKE_CURRENT_SOURCE_DIR}/build-tools/msys2/libbz2.a
)

set(FFMPEG_INCLUDE_DIRS
	${CMAKE_CURRENT_SOURCE_DIR}/build-tools/mingw/windows/include

)

list(PREPEND PLATFORM_LIBRARIES
	ksuser
	wsock32
	ws2_32
	d3d11 dxgi D3DCompiler
	setupapi
	dwmapi
	Secur32
	Bcrypt
)


file(GLOB UTIL_SOURCE_LIST 
	util/*.cpp
	util/queue/*.cpp
	util/object/*.cpp
	util/macro/*.cpp
	util/event/*.cpp
	util/log/*.cpp
	util/datatype/*.cpp
	util/avcodec/*.cpp
	util/array/*.cpp
)

file(GLOB ENCODER_SOURCE_LIST 
	encode/*.cpp
	encode/encoder/*.cpp
	encode/encoder/d3d11/*.cpp
)

file(GLOB RTP_SOURCE_LIST 
	sink/*.cpp
	sink/rtp/*.cpp
	sink/appsink/*.cpp
	sink/appsink/go/*.cpp
)

file(GLOB ADAPTIVE_SOURCE_LIST 
	adaptive/*.cpp
)

file(GLOB SESSION_SOURCE_LIST 
	session/*.cpp
	session/config/*.cpp
)

file(GLOB PLATFORM_SOURCE_LIST 
	capture/*.cpp
	capture/windows/*.cpp
	capture/windows/gpu/*.cpp
	capture/windows/duplication/*.cpp
)


set(SCREENCODER_TARGET_FILES
	${UTIL_SOURCE_LIST}
	${SESSION_SOURCE_LIST}
	${ENCODER_SOURCE_LIST}
	${ADAPTIVE_SOURCE_LIST}
	${RTP_SOURCE_LIST}
	${PLATFORM_SOURCE_LIST}
)



include_directories(
  ${CMAKE_CURRENT_SOURCE_DIR}/audio

  ${CMAKE_CURRENT_SOURCE_DIR}/encode
  ${CMAKE_CURRENT_SOURCE_DIR}/encode/encoder/d3d11
  ${CMAKE_CURRENT_SOURCE_DIR}/encode/encoder

  ${CMAKE_CURRENT_SOURCE_DIR}/input
  ${CMAKE_CURRENT_SOURCE_DIR}/adaptive
  ${CMAKE_CURRENT_SOURCE_DIR}/sink
  ${CMAKE_CURRENT_SOURCE_DIR}/sink/rtp
  ${CMAKE_CURRENT_SOURCE_DIR}/sink/appsink
  ${CMAKE_CURRENT_SOURCE_DIR}/sink/appsink/go
  ${CMAKE_CURRENT_SOURCE_DIR}/session
  ${CMAKE_CURRENT_SOURCE_DIR}/session/config

  ${CMAKE_CURRENT_SOURCE_DIR}/util
  ${CMAKE_CURRENT_SOURCE_DIR}/util/queue
  ${CMAKE_CURRENT_SOURCE_DIR}/util/object
  ${CMAKE_CURRENT_SOURCE_DIR}/util/macro
  ${CMAKE_CURRENT_SOURCE_DIR}/util/event
  ${CMAKE_CURRENT_SOURCE_DIR}/util/log
  ${CMAKE_CURRENT_SOURCE_DIR}/util/datatype
  ${CMAKE_CURRENT_SOURCE_DIR}/util/avcodec
  ${CMAKE_CURRENT_SOURCE_DIR}/util/array

  ${CMAKE_CURRENT_SOURCE_DIR}/capture
  ${CMAKE_CURRENT_SOURCE_DIR}/capture/windows
  ${CMAKE_CURRENT_SOURCE_DIR}/capture/windows/gpu
  ${CMAKE_CURRENT_SOURCE_DIR}/capture/windows/duplication

  ${FFMPEG_INCLUDE_DIRS}
  ${PLATFORM_INCLUDE_DIRS}
)
 



list(APPEND SCREENCODER_EXTERNAL_LIBRARIES
    ${FFMPEG_LIBRARIES}
    ${PLATFORM_LIBRARIES}
)





add_library(screencoderlib STATIC
	${SCREENCODER_TARGET_FILES}
)


target_link_libraries(screencoderlib ${SCREENCODER_EXTERNAL_LIBRARIES})
target_compile_definitions(screencoderlib PUBLIC ${SCREENCODER_DEFINITIONS})
set_target_properties(screencoderlib PROPERTIES CXX_STANDARD 17
                               VERSION ${PROJECT_VERSION}
                               SOVERSION ${PROJECT_VERSION_MAJOR})

add_executable(screencoder 
	examples/rtp/main.cpp
)

target_link_libraries(screencoder 
	${CMAKE_CURRENT_BINARY_DIR}/libscreencoderlib.a
	${SCREENCODER_EXTERNAL_LIBRARIES}
)
target_compile_definitions(screencoder PUBLIC ${SCREENCODER_DEFINITIONS})
set_target_properties(screencoder PROPERTIES CXX_STANDARD 17
                               VERSION ${PROJECT_VERSION}
                               SOVERSION ${PROJECT_VERSION_MAJOR})

add_executable(appsinktest
	examples/appsink/main.cpp
)

target_link_libraries(appsinktest
	${CMAKE_CURRENT_BINARY_DIR}/libscreencoderlib.a
	${SCREENCODER_EXTERNAL_LIBRARIES}
)
target_compile_definitions(appsinktest PUBLIC ${SCREENCODER_DEFINITIONS})
set_target_properties(appsinktest PROPERTIES CXX_STANDARD 17
                               VERSION ${PROJECT_VERSION}
                               SOVERSION ${PROJECT_VERSION_MAJOR})